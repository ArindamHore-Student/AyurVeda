generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  name              String
  email             String              @unique
  emailVerified     DateTime?
  passwordHash      String
  role              String              @default("PATIENT")
  image             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  medications       Medication[]
  adherenceRecords  AdherenceRecord[]
  prescriptions     Prescription[]
  accounts          Account[]
  sessions          Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Medication {
  id                String              @id @default(cuid())
  name              String
  dosage            String
  frequency         String
  instructions      String?
  startDate         DateTime
  endDate           DateTime?
  purpose           String?
  prescriptionId    String?
  userId            String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  prescription      Prescription?       @relation(fields: [prescriptionId], references: [id])
  adherenceRecords  AdherenceRecord[]
  interactions      MedicationInteraction[]
}

model Prescription {
  id                String              @id @default(cuid())
  prescribedBy      String
  prescribedDate    DateTime
  refills           Int                 @default(0)
  refillsRemaining  Int                 @default(0)
  nextRefillDate    DateTime?
  pharmacy          String?
  userId            String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  medications       Medication[]
}

model AdherenceRecord {
  id                String              @id @default(cuid())
  medicationId      String
  userId            String
  scheduledTime     DateTime
  takenTime         DateTime?
  skipped           Boolean             @default(false)
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  medication        Medication          @relation(fields: [medicationId], references: [id], onDelete: Cascade)
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MedicationInteraction {
  id                String              @id @default(cuid())
  medicationId      String
  interactingMedId  String
  severity          String              @default("UNKNOWN") // LOW, MEDIUM, HIGH, SEVERE, UNKNOWN
  description       String
  recommendation    String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  medication        Medication          @relation(fields: [medicationId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

